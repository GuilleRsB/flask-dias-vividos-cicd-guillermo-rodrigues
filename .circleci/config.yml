version: 2.1

executors:
  python-executor:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/repo

  sonar-executor:
    docker:
      - image: sonarsource/sonar-scanner-cli:latest

jobs:
  build:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

  test:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias y herramientas de test
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
      - run:
          name: Ejecutar tests con cobertura
          command: |
            pytest --cov=. --cov-report=xml
      - store_artifacts:
          path: coverage.xml
          destination: coverage

  lint:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar Flake8
          command: pip install flake8
      - run:
          name: Ejecutar lint
          command: flake8 .

  static_analysis:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar y ejecutar Bandit
          command: |
            pip install bandit
            bandit -r . --exit-zero

  vulnerability_scan:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar Node.js y npm
          command: |
            sudo apt-get update && sudo apt-get install -y nodejs npm
      - run:
          name: Instalar dependencias Python
          command: pip install -r requirements.txt
      - run:
          name: Instalar Snyk CLI
          command: sudo npm install -g snyk
      - run:
          name: Autenticar con Snyk
          command: snyk auth $SNYK_TOKEN
      - run:
          name: Ejecutar análisis de vulnerabilidades con Snyk
          command: snyk test --all-projects || echo "Vulnerabilidades detectadas"

  sonar_scan:
    executor: sonar-executor
    steps:
      - checkout
      - run:
          name: Ejecutar análisis con SonarQube
          command: |
            echo "Usando SONAR_HOST_URL=${SONAR_HOST_URL}"
            echo "Usando SONAR_TOKEN=${SONAR_TOKEN}"
            sonar-scanner \
              -Dsonar.projectKey=flask_dias_vividos_cicd_guillermo_rodrigues \
              -Dsonar.sources=. \
              -Dsonar.python.coverage.reportPaths=coverage.xml \
              -Dsonar.host.url="${SONAR_HOST_URL}" \
              -Dsonar.token="${SONAR_TOKEN}" \
              -Dsonar.organization=guillersb
      - store_artifacts:
          path: coverage.xml
          destination: reports
    environment:
      SONAR_TOKEN: $SONAR_TOKEN
      SONAR_HOST_URL: $SONAR_HOST_URL

  build_artifact:
    executor: python-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Construir imagen Docker
          command: |
            docker build -t flask-dias-vividos-cicd-guillermo-rodrigues:latest .
      - store_artifacts:
          path: .
          destination: docker-image

  deploy:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Desplegar en Kubernetes con ArgoCD
          command: |
            argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
            argocd app sync flask-dias-vividos-cicd-guillermo-rodrigues
    environment:
      ARGOCD_SERVER: $ARGOCD_SERVER
      ARGOCD_USERNAME: $ARGOCD_USERNAME
      ARGOCD_PASSWORD: $ARGOCD_PASSWORD

workflows:
  version: 2
  ci_pipeline:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - vulnerability_scan:
          requires:
            - build
      - sonar_scan:
          requires:
            - build
      - build_artifact:
          requires:
            - test
            - lint
            - static_analysis
            - vulnerability_scan
            - sonar_scan
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build_artifact
          filters:
            branches:
              only: main
