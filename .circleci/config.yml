version: 2.1

executors:
  python-executor:
    docker:
      - image: cimg/python:3.9
    working_directory: ~/repo

jobs:
  build:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

  test:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar dependencias de test y ejecutar tests
          command: |
            pip install -r requirements.txt
            pip install pytest pytest-cov
            pytest --maxfail=1 --disable-warnings -q --cov=. --cov-report=xml
      - store_artifacts:
          path: coverage.xml
          destination: reports

  lint:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar y ejecutar flake8
          command: |
            pip install flake8
            flake8 .

  static_analysis:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar y ejecutar Bandit
          command: |
            pip install bandit
            bandit -r .

  vulnerability_scan:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Ejecutar Snyk para análisis de vulnerabilidades
          command: |
            pip install snyk
            snyk test
          environment:
            SNYK_TOKEN: $SNYK_TOKEN

  sonar_scan:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Instalar SonarScanner y ejecutar análisis
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
            unzip sonar-scanner-cli-4.8.0.2856-linux.zip
            export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin
            sonar-scanner \
              -Dsonar.projectKey=flask_dias_vividos_cicd_guillermo_rodrigues \
              -Dsonar.sources=. \
              -Dsonar.python.coverage.reportPaths=coverage.xml \
              -Dsonar.host.url=$SONAR_HOST_URL \
              -Dsonar.login=$SONAR_TOKEN
          environment:
            SONAR_TOKEN: $SONAR_TOKEN
            SONAR_HOST_URL: $SONAR_HOST_URL

  build_artifact:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Construir imagen Docker
          command: |
            docker build -t flask-dias-vividos-cicd-guillermo-rodrigues:latest .
      - store_artifacts:
          path: .
          destination: docker-image

  deploy:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Desplegar en Kubernetes con ArgoCD
          command: |
            argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
            argocd app sync flask-dias-vividos-cicd-guillermo-rodrigues
          environment:
            ARGOCD_SERVER: $ARGOCD_SERVER
            ARGOCD_USERNAME: $ARGOCD_USERNAME
            ARGOCD_PASSWORD: $ARGOCD_PASSWORD

workflows:
  version: 2
  ci_pipeline:
    jobs:
      - build
      - test:
          requires:
            - build
      - lint:
          requires:
            - build
      - static_analysis:
          requires:
            - build
      - vulnerability_scan:
          requires:
            - build
      - sonar_scan:
          requires:
            - build
      - build_artifact:
          requires:
            - test
            - lint
            - static_analysis
            - vulnerability_scan
            - sonar_scan
          filters:
            branches:
              only: main
      - deploy:
          requires:
            - build_artifact
          filters:
            branches:
              only: main
